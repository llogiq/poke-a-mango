initSidebarItems({"enum":[["Button","The different kinds of `Button`s that may be `Press`ed or `Release`d."],["Event","Enum containing all the events that the `Ui` may provide."],["Input","Models input events."],["Motion","Models different kinds of motion."],["RawEvent","Adds render and update events to input events"],["Ui","Represents all events interpreted by the `Ui`."],["Widget","Events that apply to a specific widget."]],"fn":[["render","Constructor for a new `RawEvent::Render`."]],"struct":[["Click","Contains all the relevant information for a mouse click."],["DoubleClick","Contains all the relevant information for a double click."],["Drag","Contains all the relevant information for a mouse drag."],["KeyPress","Contains all relevant information for the event where a keyboard button was pressed."],["KeyRelease","Contains all relevant information for the event where a keyboard button was release."],["MousePress","Contains all relevant information for the event where a mouse button was pressed."],["MouseRelease","Contains all relevant information for the event where a mouse button was released."],["Move","Contains all relevant information for a Motion event."],["Press","Contains all relevant information for a Press event."],["Release","Contains all relevant information for a Release event."],["Scroll","Holds all the relevant information about a scroll event"],["Text","Contains all relevant information for a Text event."]],"type":[["Raw","The event type that is used by conrod to track inputs from the world. Events yielded by polling window backends should be converted to this type. This can be thought of as the event type which is supplied by the window backend to drive the state of the `Ui` forward."]]});